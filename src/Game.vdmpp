--
-- THIS FILE IS AUTOMATICALLY GENERATED!!
--
-- Generated at 03-Dec-12 by the UML-VDM++ Link
--
class Game

instance variables
  private board : Board;
  private players : set of Player;
  private currentPieceType : Board`PieceType;

operations

  public Game : () ==> Game
  Game() ==
  (
    board := new Board();
    currentPieceType := <WHITE>;
    players := { new Player(<WHITE>), new Player(<BLACK>) };
  );
  
  public reset : () ==> ()
  reset() ==
  (
    board := new Board();
    currentPieceType := <WHITE>;
    players := { new Player(<WHITE>), new Player(<BLACK>) };
  );

  public put : seq of nat1 ==> bool
  put(coord) ==
  (
    dcl mills : set of set of seq of nat1;
    dcl player : Player := getCurrentPlayer();
    dcl pMills : set of set of seq of nat1 := player.getMills();
    board.put(currentPieceType, coord);
    mills := board.getMills(currentPieceType);
    player.setMills(mills);
    return card pMills < card mills;
  );

  public getBoard : () ==> Board
  getBoard() ==
  (
  	return board;
  );

  public remove : seq of nat1 ==> ()
  remove(coord) ==
  (
    board.remove(coord);
    changePlayer();
    getCurrentPlayer().setMills(board.getMills(currentPieceType));
    changePlayer();
  );

  public isPhaseOne : () ==> bool
  isPhaseOne() ==
  (
    for all p in set players do
    (
      if p.getUnplayedPieces() > 0
      then return true;
    );
    return false;
  )
  pre players <> {};

  public isPhaseTwo : () ==> bool
  isPhaseTwo() ==
  (
    for all p in set players do
    (
      if p.getUnplayedPieces() > 0
      then return false;
    );
    return true;
  )
  pre players <> {};
  
  public getCurrentPlayer : () ==> Player
  getCurrentPlayer() ==
  (
    dcl player : Player;
    for all p in set players do
    (
      if p.getPieceType() = currentPieceType
      then player := p;
    );
    return player;
  )
  pre players <> {}
  post RESULT in set players;

  public move : seq of nat1 * seq of nat1 ==> bool
  move(origin, dest) ==
  (
    board.remove(origin);
    return put(dest);
  );

  public puttable : seq of nat1 ==> bool
  puttable(coord) ==
  (
    board.puttable(coord);
  );

  public changePlayer : () ==> ()
  changePlayer() ==
  (
    if currentPieceType = <WHITE>
    then currentPieceType := <BLACK>
    else currentPieceType := <WHITE>;
  );

  public removable : seq of nat1 ==> bool
  removable(coord) ==
  (
    return board.removable(currentPieceType, coord);
  );

  public movable : seq of nat1 * seq of nat1 ==> bool
  movable(origin, dest) ==
  (
    return board.movable(currentPieceType, origin, dest);
  );

  public getCurrentPieceType : () ==> Board`PieceType
  getCurrentPieceType() ==
    return currentPieceType;

  public getUnplayedPieceCount : () ==> map Board`PieceType to nat
  getUnplayedPieceCount() ==
  (
    dcl count : map Board`PieceType to nat := {|->};
    for all p in set players do
    (
      count := count ++ { p.getPieceType() |-> p.getUnplayedPieces() };
    );
    return count;
  )
  pre players <> {}
  post dom RESULT <> {};
end Game





class Board

types
  public PieceType = <BLACK> | <WHITE> | <UNDEFINED>;

instance variables
  private board : map seq of nat1 to PieceType;

operations

  public Board : () ==> Board
  Board() ==
  (
  	board := {
  	  [1,1] |-> <UNDEFINED>, [1,4] |-> <UNDEFINED>, [1,7] |-> <UNDEFINED>,
  	  [2,2] |-> <UNDEFINED>, [2,4] |-> <UNDEFINED>, [2,6] |-> <UNDEFINED>,
  	  [3,3] |-> <UNDEFINED>, [3,4] |-> <UNDEFINED>, [3,5] |-> <UNDEFINED>,
  	  [4,1] |-> <UNDEFINED>, [4,2] |-> <UNDEFINED>, [4,3] |-> <UNDEFINED>,
  	  [4,5] |-> <UNDEFINED>, [4,6] |-> <UNDEFINED>, [4,7] |-> <UNDEFINED>,
  	  [5,3] |-> <UNDEFINED>, [5,4] |-> <UNDEFINED>, [5,5] |-> <UNDEFINED>,
  	  [6,2] |-> <UNDEFINED>, [6,4] |-> <UNDEFINED>, [6,6] |-> <UNDEFINED>,
  	  [7,1] |-> <UNDEFINED>, [7,4] |-> <UNDEFINED>, [7,7] |-> <UNDEFINED>
  	};
  );

  public reset : () ==> ()
  reset() ==
  (
    board := {
  	  [1,1] |-> <UNDEFINED>, [1,4] |-> <UNDEFINED>, [1,7] |-> <UNDEFINED>,
  	  [2,2] |-> <UNDEFINED>, [2,4] |-> <UNDEFINED>, [2,6] |-> <UNDEFINED>,
  	  [3,3] |-> <UNDEFINED>, [3,4] |-> <UNDEFINED>, [3,5] |-> <UNDEFINED>,
  	  [4,1] |-> <UNDEFINED>, [4,2] |-> <UNDEFINED>, [4,3] |-> <UNDEFINED>,
  	  [4,5] |-> <UNDEFINED>, [4,6] |-> <UNDEFINED>, [4,7] |-> <UNDEFINED>,
  	  [5,3] |-> <UNDEFINED>, [5,4] |-> <UNDEFINED>, [5,5] |-> <UNDEFINED>,
  	  [6,2] |-> <UNDEFINED>, [6,4] |-> <UNDEFINED>, [6,6] |-> <UNDEFINED>,
  	  [7,1] |-> <UNDEFINED>, [7,4] |-> <UNDEFINED>, [7,7] |-> <UNDEFINED>
  	};
  );
  
  public getPiece : seq of nat1 ==> PieceType
  getPiece(coords) ==
  (
    return board(coords);
  )
  pre validCoords(coords) and board <> {|->};
  
  public getBoard : () ==> map seq of nat1 to PieceType
  getBoard() ==
  (
    return board;
  );
  
  public validCoords : seq of nat1 ==> bool
  validCoords(coord) ==
  (
  	return coord in set dom board;
  )
  pre len coord = 2;

  public remove : seq of nat1 ==> ()
  remove(coord) ==
  (
  	board := board ++ { coord |-> <UNDEFINED> };
  )
  pre board(coord) <> <UNDEFINED> and validCoords(coord)
  post board(coord) = <UNDEFINED>;

  public puttable : seq of nat1 ==> bool
  puttable(coord) ==
  (
  	return board(coord) = <UNDEFINED>;
  )
  pre validCoords(coord);

  public movable : PieceType * seq of nat1 * seq of nat1 ==> bool
  movable(currentPlayer, origin, dest) ==
  (
  	if board(origin) = currentPlayer and board(dest) = <UNDEFINED>
  	then return movableHorizontal(origin, dest) or movableVertical(origin, dest)
  	else return false;
  )
  pre validCoords(dest) and validCoords(origin);
  
  public movableHorizontal : seq of nat1 * seq of nat1 ==> bool
  movableHorizontal(origin, dest) ==
  (
    if origin(1) = dest(1)
    then
    (
      if origin(1) = 1 or origin(1) = 7
      then return origin(2) = (dest(2) - 3) or origin(2) = (dest(2) + 3)
      else if origin(1) = 2 or origin(1) = 6
      then return origin(2) = (dest(2) - 2) or origin(2) = (dest(2) + 2)
      else return origin(2) = (dest(2) - 1) or origin(2) = (dest(2) + 1);
    )
    else return false;
  )
  pre validCoords(origin) and validCoords(dest);
  
  public movableVertical : seq of nat1 * seq of nat1 ==> bool
  movableVertical(origin, dest) ==
  (
    if origin(2) = dest(2)
    then
    (
      if origin(2) = 1 or origin(2) = 7
      then return origin(1) = (dest(1) - 3) or origin(1) = (dest(1) + 3)
      else if origin(2) = 2 or origin(2) = 6
      then return origin(1) = (dest(1) - 2) or origin(1) = (dest(1) + 2)
      else return origin(1) = (dest(1) - 1) or origin(1) = (dest(1) + 1);
    )
    else return false;
  )
  pre validCoords(origin) and validCoords(dest);

  public put : PieceType * seq of nat1 ==> ()
  put(piece, coord) ==
  (
  	board := board ++ { coord |-> piece };
  )
  pre board(coord) = <UNDEFINED> and validCoords(coord)
  post board(coord) = piece;

  public hasMills : PieceType ==> bool
  hasMills(piece) ==
  (
  	dcl coords : set of seq of nat1 := dom ( board :> { piece } );
	return 
	       -- horizontal
	       ( { [1,1] , [1,4], [1,7] } subset coords ) or
	       ( { [2,2] , [2,4], [2,6] } subset coords ) or
	       ( { [3,3] , [3,4], [3,5] } subset coords ) or
	       ( { [5,3] , [5,4], [5,5] } subset coords ) or
	       ( { [6,2] , [6,4], [6,6] } subset coords ) or
	       ( { [7,1] , [7,4], [7,7] } subset coords ) or
	       -- vertical
	       ( { [1,1] , [4,1], [7,1] } subset coords ) or
	       ( { [2,2] , [4,2], [6,2] } subset coords ) or
	       ( { [3,3] , [4,3], [5,3] } subset coords ) or
	       ( { [3,5] , [4,5], [5,5] } subset coords ) or
	       ( { [2,6] , [4,6], [6,6] } subset coords ) or
	       ( { [1,7] , [4,7], [7,7] } subset coords ) or
	       -- special
	       ( { [4,1] , [4,2], [4,3] } subset coords ) or
	       ( { [4,5] , [4,6], [4,7] } subset coords ) or
	       ( { [1,4] , [2,4], [3,4] } subset coords ) or
	       ( { [5,4] , [6,4], [7,4] } subset coords );
  )
  pre piece <> <UNDEFINED>;
  
  public getMills : PieceType ==> set of set of seq of nat1
  getMills(piece) ==
  (
  	dcl coords : set of seq of nat1 := dom ( board :> { piece } );
  	dcl mills : set of set of seq of nat1 := {};
	if ( { [1,1] , [1,4], [1,7] } subset coords ) then mills := mills union  { { [1,1] , [1,4], [1,7] } };
	if ( { [1,1] , [1,4], [1,7] } subset coords ) then mills := mills union  { { [1,1] , [1,4], [1,7] } };
	if ( { [2,2] , [2,4], [2,6] } subset coords ) then mills := mills union  { { [2,2] , [2,4], [2,6] } };
	if ( { [3,3] , [3,4], [3,5] } subset coords ) then mills := mills union  { { [3,3] , [3,4], [3,5] } };
	if ( { [5,3] , [5,4], [5,5] } subset coords ) then mills := mills union  { { [5,3] , [5,4], [5,5] } };
	if ( { [6,2] , [6,4], [6,6] } subset coords ) then mills := mills union  { { [6,2] , [6,4], [6,6] } };
	if ( { [7,1] , [7,4], [7,7] } subset coords ) then mills := mills union  { { [7,1] , [7,4], [7,7] } };
	if ( { [1,1] , [4,1], [7,1] } subset coords ) then mills := mills union  { { [1,1] , [4,1], [7,1] } };
	if ( { [2,2] , [4,2], [6,2] } subset coords ) then mills := mills union  { { [2,2] , [4,2], [6,2] } };
	if ( { [3,3] , [4,3], [5,3] } subset coords ) then mills := mills union  { { [3,3] , [4,3], [5,3] } };
	if ( { [3,5] , [4,5], [5,5] } subset coords ) then mills := mills union  { { [3,5] , [4,5], [5,5] } };
	if ( { [2,6] , [4,6], [6,6] } subset coords ) then mills := mills union  { { [2,6] , [4,6], [6,6] } };
	if ( { [1,7] , [4,7], [7,7] } subset coords ) then mills := mills union  { { [1,7] , [4,7], [7,7] } };
	if ( { [4,1] , [4,2], [4,3] } subset coords ) then mills := mills union  { { [4,1] , [4,2], [4,3] } };
	if ( { [4,5] , [4,6], [4,7] } subset coords ) then mills := mills union  { { [4,5] , [4,6], [4,7] } };
	if ( { [1,4] , [2,4], [3,4] } subset coords ) then mills := mills union  { { [1,4] , [2,4], [3,4] } };
	if ( { [5,4] , [6,4], [7,4] } subset coords ) then mills := mills union  { { [5,4] , [6,4], [7,4] } };
	return mills;
  )
  pre piece <> <UNDEFINED>;

  public removable : PieceType * seq of nat1 ==> bool
  removable(currentPlayer, coord) ==
  (
  	dcl piece : PieceType := board(coord);
  	if piece <> <UNDEFINED> and piece <> currentPlayer
  	then return removableCheck(currentPlayer, coord)
  	else return false;
  )
  pre currentPlayer <> <UNDEFINED> and validCoords(coord);
  
  public removableCheck : PieceType * seq of nat1 ==> bool
  removableCheck(currentPlayer, coord) ==
  (
    dcl player : PieceType;
    dcl allCoords : set of seq of nat1;
    dcl millCoords : set of seq of nat1;
    if currentPlayer = <WHITE>
    then player := <BLACK>
    else player := <WHITE>;
    allCoords := dom ( board :> { player } );
    millCoords := dunion getMills(player);
    return coord not in set millCoords or allCoords = millCoords;
  )
  pre currentPlayer <> <UNDEFINED> and validCoords(coord);

end Board




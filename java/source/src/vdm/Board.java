package vdm;

//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2012-12-06 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Thu 30-Oct-2008 14:59:38)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;



public class Board implements EvaluatePP {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=board KEEP=NO
  @SuppressWarnings("rawtypes")
private volatile HashMap board = new HashMap();
// ***** VDMTOOLS END Name=board

// ***** VDMTOOLS START Name=sentinel KEEP=NO
  volatile Sentinel sentinel;
// ***** VDMTOOLS END Name=sentinel


// ***** VDMTOOLS START Name=BoardSentinel KEEP=NO
  class BoardSentinel extends Sentinel {

    public final int put = 0;

    public final int Board = 1;

    public final int reset = 2;

    public final int remove = 3;

    public final int movable = 4;

    public final int getBoard = 5;

    public final int getMills = 6;

    public final int getPiece = 7;

    public final int hasMills = 8;

    public final int puttable = 9;

    public final int removable = 10;

    public final int validCoords = 11;

    public final int removableCheck = 12;

    public final int movableVertical = 13;

    public final int movableHorizontal = 14;

    public final int nr_functions = 15;


    public BoardSentinel () throws CGException {}


    public BoardSentinel (EvaluatePP instance) throws CGException {
      init(nr_functions, instance);
    }

  }
// ***** VDMTOOLS END Name=BoardSentinel
;

// ***** VDMTOOLS START Name=evaluatePP#1|int KEEP=NO
  public Boolean evaluatePP (int fnr) throws CGException {
    return new Boolean(true);
  }
// ***** VDMTOOLS END Name=evaluatePP#1|int


// ***** VDMTOOLS START Name=setSentinel KEEP=NO
  public void setSentinel () {
    try {
      sentinel = new BoardSentinel(this);
    }
    catch (CGException e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=setSentinel


// ***** VDMTOOLS START Name=vdm_init_Board KEEP=NO
  private void vdm_init_Board () throws CGException {
    try {
      setSentinel();
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_Board


// ***** VDMTOOLS START Name=Board KEEP=NO
  @SuppressWarnings({ "rawtypes", "unchecked" })
public Board () throws CGException {
    try {

      vdm_init_Board();
      {

        HashMap rhs_1 = new HashMap();
        Vector tmpVar1_2 = null;
        tmpVar1_2 = new Vector();
        tmpVar1_2.add(new Integer(1));
        tmpVar1_2.add(new Integer(1));
        rhs_1 = new HashMap();
        rhs_1.put(tmpVar1_2, new quotes.UNDEFINED());
        Vector tmpVar1_6 = null;
        tmpVar1_6 = new Vector();
        tmpVar1_6.add(new Integer(1));
        tmpVar1_6.add(new Integer(4));
        rhs_1.put(tmpVar1_6, new quotes.UNDEFINED());
        Vector tmpVar1_10 = null;
        tmpVar1_10 = new Vector();
        tmpVar1_10.add(new Integer(1));
        tmpVar1_10.add(new Integer(7));
        rhs_1.put(tmpVar1_10, new quotes.UNDEFINED());
        Vector tmpVar1_14 = null;
        tmpVar1_14 = new Vector();
        tmpVar1_14.add(new Integer(2));
        tmpVar1_14.add(new Integer(2));
        rhs_1.put(tmpVar1_14, new quotes.UNDEFINED());
        Vector tmpVar1_18 = null;
        tmpVar1_18 = new Vector();
        tmpVar1_18.add(new Integer(2));
        tmpVar1_18.add(new Integer(4));
        rhs_1.put(tmpVar1_18, new quotes.UNDEFINED());
        Vector tmpVar1_22 = null;
        tmpVar1_22 = new Vector();
        tmpVar1_22.add(new Integer(2));
        tmpVar1_22.add(new Integer(6));
        rhs_1.put(tmpVar1_22, new quotes.UNDEFINED());
        Vector tmpVar1_26 = null;
        tmpVar1_26 = new Vector();
        tmpVar1_26.add(new Integer(3));
        tmpVar1_26.add(new Integer(3));
        rhs_1.put(tmpVar1_26, new quotes.UNDEFINED());
        Vector tmpVar1_30 = null;
        tmpVar1_30 = new Vector();
        tmpVar1_30.add(new Integer(3));
        tmpVar1_30.add(new Integer(4));
        rhs_1.put(tmpVar1_30, new quotes.UNDEFINED());
        Vector tmpVar1_34 = null;
        tmpVar1_34 = new Vector();
        tmpVar1_34.add(new Integer(3));
        tmpVar1_34.add(new Integer(5));
        rhs_1.put(tmpVar1_34, new quotes.UNDEFINED());
        Vector tmpVar1_38 = null;
        tmpVar1_38 = new Vector();
        tmpVar1_38.add(new Integer(4));
        tmpVar1_38.add(new Integer(1));
        rhs_1.put(tmpVar1_38, new quotes.UNDEFINED());
        Vector tmpVar1_42 = null;
        tmpVar1_42 = new Vector();
        tmpVar1_42.add(new Integer(4));
        tmpVar1_42.add(new Integer(2));
        rhs_1.put(tmpVar1_42, new quotes.UNDEFINED());
        Vector tmpVar1_46 = null;
        tmpVar1_46 = new Vector();
        tmpVar1_46.add(new Integer(4));
        tmpVar1_46.add(new Integer(3));
        rhs_1.put(tmpVar1_46, new quotes.UNDEFINED());
        Vector tmpVar1_50 = null;
        tmpVar1_50 = new Vector();
        tmpVar1_50.add(new Integer(4));
        tmpVar1_50.add(new Integer(5));
        rhs_1.put(tmpVar1_50, new quotes.UNDEFINED());
        Vector tmpVar1_54 = null;
        tmpVar1_54 = new Vector();
        tmpVar1_54.add(new Integer(4));
        tmpVar1_54.add(new Integer(6));
        rhs_1.put(tmpVar1_54, new quotes.UNDEFINED());
        Vector tmpVar1_58 = null;
        tmpVar1_58 = new Vector();
        tmpVar1_58.add(new Integer(4));
        tmpVar1_58.add(new Integer(7));
        rhs_1.put(tmpVar1_58, new quotes.UNDEFINED());
        Vector tmpVar1_62 = null;
        tmpVar1_62 = new Vector();
        tmpVar1_62.add(new Integer(5));
        tmpVar1_62.add(new Integer(3));
        rhs_1.put(tmpVar1_62, new quotes.UNDEFINED());
        Vector tmpVar1_66 = null;
        tmpVar1_66 = new Vector();
        tmpVar1_66.add(new Integer(5));
        tmpVar1_66.add(new Integer(4));
        rhs_1.put(tmpVar1_66, new quotes.UNDEFINED());
        Vector tmpVar1_70 = null;
        tmpVar1_70 = new Vector();
        tmpVar1_70.add(new Integer(5));
        tmpVar1_70.add(new Integer(5));
        rhs_1.put(tmpVar1_70, new quotes.UNDEFINED());
        Vector tmpVar1_74 = null;
        tmpVar1_74 = new Vector();
        tmpVar1_74.add(new Integer(6));
        tmpVar1_74.add(new Integer(2));
        rhs_1.put(tmpVar1_74, new quotes.UNDEFINED());
        Vector tmpVar1_78 = null;
        tmpVar1_78 = new Vector();
        tmpVar1_78.add(new Integer(6));
        tmpVar1_78.add(new Integer(4));
        rhs_1.put(tmpVar1_78, new quotes.UNDEFINED());
        Vector tmpVar1_82 = null;
        tmpVar1_82 = new Vector();
        tmpVar1_82.add(new Integer(6));
        tmpVar1_82.add(new Integer(6));
        rhs_1.put(tmpVar1_82, new quotes.UNDEFINED());
        Vector tmpVar1_86 = null;
        tmpVar1_86 = new Vector();
        tmpVar1_86.add(new Integer(7));
        tmpVar1_86.add(new Integer(1));
        rhs_1.put(tmpVar1_86, new quotes.UNDEFINED());
        Vector tmpVar1_90 = null;
        tmpVar1_90 = new Vector();
        tmpVar1_90.add(new Integer(7));
        tmpVar1_90.add(new Integer(4));
        rhs_1.put(tmpVar1_90, new quotes.UNDEFINED());
        Vector tmpVar1_94 = null;
        tmpVar1_94 = new Vector();
        tmpVar1_94.add(new Integer(7));
        tmpVar1_94.add(new Integer(7));
        rhs_1.put(tmpVar1_94, new quotes.UNDEFINED());
        board = (HashMap) UTIL.clone(rhs_1);
      }
      setSentinel();
    }
    catch (Throwable e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=Board


// ***** VDMTOOLS START Name=reset KEEP=NO
  @SuppressWarnings({ "rawtypes", "unchecked" })
public void reset () throws CGException {

    sentinel.entering(((BoardSentinel) sentinel).reset);
    try {

      HashMap rhs_1 = new HashMap();
      Vector tmpVar1_2 = null;
      tmpVar1_2 = new Vector();
      tmpVar1_2.add(new Integer(1));
      tmpVar1_2.add(new Integer(1));
      rhs_1 = new HashMap();
      rhs_1.put(tmpVar1_2, new quotes.UNDEFINED());
      Vector tmpVar1_6 = null;
      tmpVar1_6 = new Vector();
      tmpVar1_6.add(new Integer(1));
      tmpVar1_6.add(new Integer(4));
      rhs_1.put(tmpVar1_6, new quotes.UNDEFINED());
      Vector tmpVar1_10 = null;
      tmpVar1_10 = new Vector();
      tmpVar1_10.add(new Integer(1));
      tmpVar1_10.add(new Integer(7));
      rhs_1.put(tmpVar1_10, new quotes.UNDEFINED());
      Vector tmpVar1_14 = null;
      tmpVar1_14 = new Vector();
      tmpVar1_14.add(new Integer(2));
      tmpVar1_14.add(new Integer(2));
      rhs_1.put(tmpVar1_14, new quotes.UNDEFINED());
      Vector tmpVar1_18 = null;
      tmpVar1_18 = new Vector();
      tmpVar1_18.add(new Integer(2));
      tmpVar1_18.add(new Integer(4));
      rhs_1.put(tmpVar1_18, new quotes.UNDEFINED());
      Vector tmpVar1_22 = null;
      tmpVar1_22 = new Vector();
      tmpVar1_22.add(new Integer(2));
      tmpVar1_22.add(new Integer(6));
      rhs_1.put(tmpVar1_22, new quotes.UNDEFINED());
      Vector tmpVar1_26 = null;
      tmpVar1_26 = new Vector();
      tmpVar1_26.add(new Integer(3));
      tmpVar1_26.add(new Integer(3));
      rhs_1.put(tmpVar1_26, new quotes.UNDEFINED());
      Vector tmpVar1_30 = null;
      tmpVar1_30 = new Vector();
      tmpVar1_30.add(new Integer(3));
      tmpVar1_30.add(new Integer(4));
      rhs_1.put(tmpVar1_30, new quotes.UNDEFINED());
      Vector tmpVar1_34 = null;
      tmpVar1_34 = new Vector();
      tmpVar1_34.add(new Integer(3));
      tmpVar1_34.add(new Integer(5));
      rhs_1.put(tmpVar1_34, new quotes.UNDEFINED());
      Vector tmpVar1_38 = null;
      tmpVar1_38 = new Vector();
      tmpVar1_38.add(new Integer(4));
      tmpVar1_38.add(new Integer(1));
      rhs_1.put(tmpVar1_38, new quotes.UNDEFINED());
      Vector tmpVar1_42 = null;
      tmpVar1_42 = new Vector();
      tmpVar1_42.add(new Integer(4));
      tmpVar1_42.add(new Integer(2));
      rhs_1.put(tmpVar1_42, new quotes.UNDEFINED());
      Vector tmpVar1_46 = null;
      tmpVar1_46 = new Vector();
      tmpVar1_46.add(new Integer(4));
      tmpVar1_46.add(new Integer(3));
      rhs_1.put(tmpVar1_46, new quotes.UNDEFINED());
      Vector tmpVar1_50 = null;
      tmpVar1_50 = new Vector();
      tmpVar1_50.add(new Integer(4));
      tmpVar1_50.add(new Integer(5));
      rhs_1.put(tmpVar1_50, new quotes.UNDEFINED());
      Vector tmpVar1_54 = null;
      tmpVar1_54 = new Vector();
      tmpVar1_54.add(new Integer(4));
      tmpVar1_54.add(new Integer(6));
      rhs_1.put(tmpVar1_54, new quotes.UNDEFINED());
      Vector tmpVar1_58 = null;
      tmpVar1_58 = new Vector();
      tmpVar1_58.add(new Integer(4));
      tmpVar1_58.add(new Integer(7));
      rhs_1.put(tmpVar1_58, new quotes.UNDEFINED());
      Vector tmpVar1_62 = null;
      tmpVar1_62 = new Vector();
      tmpVar1_62.add(new Integer(5));
      tmpVar1_62.add(new Integer(3));
      rhs_1.put(tmpVar1_62, new quotes.UNDEFINED());
      Vector tmpVar1_66 = null;
      tmpVar1_66 = new Vector();
      tmpVar1_66.add(new Integer(5));
      tmpVar1_66.add(new Integer(4));
      rhs_1.put(tmpVar1_66, new quotes.UNDEFINED());
      Vector tmpVar1_70 = null;
      tmpVar1_70 = new Vector();
      tmpVar1_70.add(new Integer(5));
      tmpVar1_70.add(new Integer(5));
      rhs_1.put(tmpVar1_70, new quotes.UNDEFINED());
      Vector tmpVar1_74 = null;
      tmpVar1_74 = new Vector();
      tmpVar1_74.add(new Integer(6));
      tmpVar1_74.add(new Integer(2));
      rhs_1.put(tmpVar1_74, new quotes.UNDEFINED());
      Vector tmpVar1_78 = null;
      tmpVar1_78 = new Vector();
      tmpVar1_78.add(new Integer(6));
      tmpVar1_78.add(new Integer(4));
      rhs_1.put(tmpVar1_78, new quotes.UNDEFINED());
      Vector tmpVar1_82 = null;
      tmpVar1_82 = new Vector();
      tmpVar1_82.add(new Integer(6));
      tmpVar1_82.add(new Integer(6));
      rhs_1.put(tmpVar1_82, new quotes.UNDEFINED());
      Vector tmpVar1_86 = null;
      tmpVar1_86 = new Vector();
      tmpVar1_86.add(new Integer(7));
      tmpVar1_86.add(new Integer(1));
      rhs_1.put(tmpVar1_86, new quotes.UNDEFINED());
      Vector tmpVar1_90 = null;
      tmpVar1_90 = new Vector();
      tmpVar1_90.add(new Integer(7));
      tmpVar1_90.add(new Integer(4));
      rhs_1.put(tmpVar1_90, new quotes.UNDEFINED());
      Vector tmpVar1_94 = null;
      tmpVar1_94 = new Vector();
      tmpVar1_94.add(new Integer(7));
      tmpVar1_94.add(new Integer(7));
      rhs_1.put(tmpVar1_94, new quotes.UNDEFINED());
      board = (HashMap) UTIL.clone(rhs_1);
    }
    finally {
      sentinel.leaving(((BoardSentinel) sentinel).reset);
    }
  }
// ***** VDMTOOLS END Name=reset


// ***** VDMTOOLS START Name=getPiece#1|Vector KEEP=NO
  @SuppressWarnings("rawtypes")
public Object getPiece (final Vector coords) throws CGException {

    if (!this.pre_getPiece(coords).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in getPiece");
    sentinel.entering(((BoardSentinel) sentinel).getPiece);
    try {
      return board.get(coords);
    }
    finally {
      sentinel.leaving(((BoardSentinel) sentinel).getPiece);
    }
  }
// ***** VDMTOOLS END Name=getPiece#1|Vector


// ***** VDMTOOLS START Name=pre_getPiece#1|Vector KEEP=NO
  @SuppressWarnings("rawtypes")
public Boolean pre_getPiece (final Vector coords) throws CGException {

    Boolean varRes_2 = null;
    {
      if ((varRes_2 = validCoords(coords)).booleanValue()) 
        varRes_2 = new Boolean(!UTIL.equals(board, new HashMap()));
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=pre_getPiece#1|Vector


// ***** VDMTOOLS START Name=getBoard KEEP=NO
  @SuppressWarnings("rawtypes")
public HashMap getBoard () throws CGException {

    sentinel.entering(((BoardSentinel) sentinel).getBoard);
    try {
      return board;
    }
    finally {
      sentinel.leaving(((BoardSentinel) sentinel).getBoard);
    }
  }
// ***** VDMTOOLS END Name=getBoard


// ***** VDMTOOLS START Name=validCoords#1|Vector KEEP=NO
  @SuppressWarnings("rawtypes")
public Boolean validCoords (final Vector coord) throws CGException {

    if (!this.pre_validCoords(coord).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in validCoords");
    sentinel.entering(((BoardSentinel) sentinel).validCoords);
    try {

      Boolean rexpr_2 = null;
      rexpr_2 = new Boolean(board.containsKey(coord));
      return rexpr_2;
    }
    finally {
      sentinel.leaving(((BoardSentinel) sentinel).validCoords);
    }
  }
// ***** VDMTOOLS END Name=validCoords#1|Vector


// ***** VDMTOOLS START Name=pre_validCoords#1|Vector KEEP=NO
  @SuppressWarnings("rawtypes")
public Boolean pre_validCoords (final Vector coord) throws CGException {
    return new Boolean(new Integer(coord.size()).intValue() == new Integer(2).intValue());
  }
// ***** VDMTOOLS END Name=pre_validCoords#1|Vector


// ***** VDMTOOLS START Name=remove#1|Vector KEEP=NO
  @SuppressWarnings({ "rawtypes", "unchecked" })
public void remove (final Vector coord) throws CGException {

    if (!this.pre_remove(coord).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in remove");
    sentinel.entering(((BoardSentinel) sentinel).remove);
    try {
      board.put(coord, new quotes.UNDEFINED());
    }
    finally {
      sentinel.leaving(((BoardSentinel) sentinel).remove);
    }
  }
// ***** VDMTOOLS END Name=remove#1|Vector


// ***** VDMTOOLS START Name=pre_remove#1|Vector KEEP=NO
  @SuppressWarnings("rawtypes")
public Boolean pre_remove (final Vector coord) throws CGException {

    Boolean varRes_2 = null;
    {
      if ((varRes_2 = new Boolean(!UTIL.equals(board.get(coord), new quotes.UNDEFINED()))).booleanValue()) 
        varRes_2 = validCoords(coord);
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=pre_remove#1|Vector


// ***** VDMTOOLS START Name=puttable#1|Vector KEEP=NO
  @SuppressWarnings("rawtypes")
public Boolean puttable (final Vector coord) throws CGException {

    if (!this.pre_puttable(coord).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in puttable");
    sentinel.entering(((BoardSentinel) sentinel).puttable);
    try {
      return new Boolean(UTIL.equals(board.get(coord), new quotes.UNDEFINED()));
    }
    finally {
      sentinel.leaving(((BoardSentinel) sentinel).puttable);
    }
  }
// ***** VDMTOOLS END Name=puttable#1|Vector


// ***** VDMTOOLS START Name=pre_puttable#1|Vector KEEP=NO
  @SuppressWarnings("rawtypes")
public Boolean pre_puttable (final Vector coord) throws CGException {
    return validCoords(coord);
  }
// ***** VDMTOOLS END Name=pre_puttable#1|Vector


// ***** VDMTOOLS START Name=movable#3|Object|Vector|Vector KEEP=NO
  @SuppressWarnings("rawtypes")
public Boolean movable (final Object currentPlayer, final Vector origin, final Vector dest) throws CGException {

    if (!this.pre_movable(currentPlayer, origin, dest).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in movable");
    sentinel.entering(((BoardSentinel) sentinel).movable);
    try {

      Boolean cond_4 = null;
      {
        if ((cond_4 = new Boolean(UTIL.equals(board.get(origin), currentPlayer))).booleanValue()) 
          cond_4 = new Boolean(UTIL.equals(board.get(dest), new quotes.UNDEFINED()));
      }
      if (cond_4.booleanValue()) {

        Boolean rexpr_16 = null;
        {
          if (!(rexpr_16 = movableHorizontal(origin, dest)).booleanValue()) 
            rexpr_16 = movableVertical(origin, dest);
        }
        return rexpr_16;
      }
      else 
        return new Boolean(false);
    }
    finally {
      sentinel.leaving(((BoardSentinel) sentinel).movable);
    }
  }
// ***** VDMTOOLS END Name=movable#3|Object|Vector|Vector


// ***** VDMTOOLS START Name=pre_movable#3|Object|Vector|Vector KEEP=NO
  @SuppressWarnings("rawtypes")
public Boolean pre_movable (final Object currentPlayer, final Vector origin, final Vector dest) throws CGException {

    Boolean varRes_4 = null;
    {
      if ((varRes_4 = validCoords(dest)).booleanValue()) 
        varRes_4 = validCoords(origin);
    }
    return varRes_4;
  }
// ***** VDMTOOLS END Name=pre_movable#3|Object|Vector|Vector


// ***** VDMTOOLS START Name=movableHorizontal#2|Vector|Vector KEEP=NO
  @SuppressWarnings("rawtypes")
public Boolean movableHorizontal (final Vector origin, final Vector dest) throws CGException {

    if (!this.pre_movableHorizontal(origin, dest).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in movableHorizontal");
    sentinel.entering(((BoardSentinel) sentinel).movableHorizontal);
    try {

      Boolean cond_3 = null;
      Integer var1_4 = null;
      if ((1 <= new Integer(1).intValue()) && (new Integer(1).intValue() <= origin.size())) 
        var1_4 = UTIL.NumberToInt(origin.get(new Integer(1).intValue() - 1));
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      Integer var2_7 = null;
      if ((1 <= new Integer(1).intValue()) && (new Integer(1).intValue() <= dest.size())) 
        var2_7 = UTIL.NumberToInt(dest.get(new Integer(1).intValue() - 1));
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      cond_3 = new Boolean(var1_4.intValue() == var2_7.intValue());
      if (cond_3.booleanValue()) {

        Boolean cond_11 = null;
        Boolean var1_12 = null;
        Integer var1_13 = null;
        if ((1 <= new Integer(1).intValue()) && (new Integer(1).intValue() <= origin.size())) 
          var1_13 = UTIL.NumberToInt(origin.get(new Integer(1).intValue() - 1));
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var1_12 = new Boolean(var1_13.intValue() == new Integer(1).intValue());
        {
          if (!(cond_11 = var1_12).booleanValue()) {

            Boolean var2_17 = null;
            Integer var1_18 = null;
            if ((1 <= new Integer(1).intValue()) && (new Integer(1).intValue() <= origin.size())) 
              var1_18 = UTIL.NumberToInt(origin.get(new Integer(1).intValue() - 1));
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            var2_17 = new Boolean(var1_18.intValue() == new Integer(7).intValue());
            cond_11 = var2_17;
          }
        }
        if (cond_11.booleanValue()) {

          Boolean rexpr_71 = null;
          Boolean var1_72 = null;
          Integer var1_73 = null;
          if ((1 <= new Integer(2).intValue()) && (new Integer(2).intValue() <= origin.size())) 
            var1_73 = UTIL.NumberToInt(origin.get(new Integer(2).intValue() - 1));
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          Integer var2_76 = null;
          Integer var1_77 = null;
          if ((1 <= new Integer(2).intValue()) && (new Integer(2).intValue() <= dest.size())) 
            var1_77 = UTIL.NumberToInt(dest.get(new Integer(2).intValue() - 1));
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          var2_76 = new Integer(var1_77.intValue() - new Integer(3).intValue());
          var1_72 = new Boolean(var1_73.intValue() == var2_76.intValue());
          {
            if (!(rexpr_71 = var1_72).booleanValue()) {

              Boolean var2_81 = null;
              Integer var1_82 = null;
              if ((1 <= new Integer(2).intValue()) && (new Integer(2).intValue() <= origin.size())) 
                var1_82 = UTIL.NumberToInt(origin.get(new Integer(2).intValue() - 1));
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              Integer var2_85 = null;
              Integer var1_86 = null;
              if ((1 <= new Integer(2).intValue()) && (new Integer(2).intValue() <= dest.size())) 
                var1_86 = UTIL.NumberToInt(dest.get(new Integer(2).intValue() - 1));
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              var2_85 = new Integer(var1_86.intValue() + new Integer(3).intValue());
              var2_81 = new Boolean(var1_82.intValue() == var2_85.intValue());
              rexpr_71 = var2_81;
            }
          }
          return rexpr_71;
        }
        else {

          Boolean cond_22 = null;
          Boolean var1_23 = null;
          Integer var1_24 = null;
          if ((1 <= new Integer(1).intValue()) && (new Integer(1).intValue() <= origin.size())) 
            var1_24 = UTIL.NumberToInt(origin.get(new Integer(1).intValue() - 1));
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          var1_23 = new Boolean(var1_24.intValue() == new Integer(2).intValue());
          {
            if (!(cond_22 = var1_23).booleanValue()) {

              Boolean var2_28 = null;
              Integer var1_29 = null;
              if ((1 <= new Integer(1).intValue()) && (new Integer(1).intValue() <= origin.size())) 
                var1_29 = UTIL.NumberToInt(origin.get(new Integer(1).intValue() - 1));
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              var2_28 = new Boolean(var1_29.intValue() == new Integer(6).intValue());
              cond_22 = var2_28;
            }
          }
          if (cond_22.booleanValue()) {

            Boolean rexpr_52 = null;
            Boolean var1_53 = null;
            Integer var1_54 = null;
            if ((1 <= new Integer(2).intValue()) && (new Integer(2).intValue() <= origin.size())) 
              var1_54 = UTIL.NumberToInt(origin.get(new Integer(2).intValue() - 1));
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            Integer var2_57 = null;
            Integer var1_58 = null;
            if ((1 <= new Integer(2).intValue()) && (new Integer(2).intValue() <= dest.size())) 
              var1_58 = UTIL.NumberToInt(dest.get(new Integer(2).intValue() - 1));
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            var2_57 = new Integer(var1_58.intValue() - new Integer(2).intValue());
            var1_53 = new Boolean(var1_54.intValue() == var2_57.intValue());
            {
              if (!(rexpr_52 = var1_53).booleanValue()) {

                Boolean var2_62 = null;
                Integer var1_63 = null;
                if ((1 <= new Integer(2).intValue()) && (new Integer(2).intValue() <= origin.size())) 
                  var1_63 = UTIL.NumberToInt(origin.get(new Integer(2).intValue() - 1));
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                Integer var2_66 = null;
                Integer var1_67 = null;
                if ((1 <= new Integer(2).intValue()) && (new Integer(2).intValue() <= dest.size())) 
                  var1_67 = UTIL.NumberToInt(dest.get(new Integer(2).intValue() - 1));
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                var2_66 = new Integer(var1_67.intValue() + new Integer(2).intValue());
                var2_62 = new Boolean(var1_63.intValue() == var2_66.intValue());
                rexpr_52 = var2_62;
              }
            }
            return rexpr_52;
          }
          else {

            Boolean rexpr_33 = null;
            Boolean var1_34 = null;
            Integer var1_35 = null;
            if ((1 <= new Integer(2).intValue()) && (new Integer(2).intValue() <= origin.size())) 
              var1_35 = UTIL.NumberToInt(origin.get(new Integer(2).intValue() - 1));
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            Integer var2_38 = null;
            Integer var1_39 = null;
            if ((1 <= new Integer(2).intValue()) && (new Integer(2).intValue() <= dest.size())) 
              var1_39 = UTIL.NumberToInt(dest.get(new Integer(2).intValue() - 1));
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            var2_38 = new Integer(var1_39.intValue() - new Integer(1).intValue());
            var1_34 = new Boolean(var1_35.intValue() == var2_38.intValue());
            {
              if (!(rexpr_33 = var1_34).booleanValue()) {

                Boolean var2_43 = null;
                Integer var1_44 = null;
                if ((1 <= new Integer(2).intValue()) && (new Integer(2).intValue() <= origin.size())) 
                  var1_44 = UTIL.NumberToInt(origin.get(new Integer(2).intValue() - 1));
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                Integer var2_47 = null;
                Integer var1_48 = null;
                if ((1 <= new Integer(2).intValue()) && (new Integer(2).intValue() <= dest.size())) 
                  var1_48 = UTIL.NumberToInt(dest.get(new Integer(2).intValue() - 1));
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                var2_47 = new Integer(var1_48.intValue() + new Integer(1).intValue());
                var2_43 = new Boolean(var1_44.intValue() == var2_47.intValue());
                rexpr_33 = var2_43;
              }
            }
            return rexpr_33;
          }
        }
      }
      else 
        return new Boolean(false);
    }
    finally {
      sentinel.leaving(((BoardSentinel) sentinel).movableHorizontal);
    }
  }
// ***** VDMTOOLS END Name=movableHorizontal#2|Vector|Vector


// ***** VDMTOOLS START Name=pre_movableHorizontal#2|Vector|Vector KEEP=NO
  @SuppressWarnings("rawtypes")
public Boolean pre_movableHorizontal (final Vector origin, final Vector dest) throws CGException {

    Boolean varRes_3 = null;
    {
      if ((varRes_3 = validCoords(origin)).booleanValue()) 
        varRes_3 = validCoords(dest);
    }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=pre_movableHorizontal#2|Vector|Vector


// ***** VDMTOOLS START Name=movableVertical#2|Vector|Vector KEEP=NO
  @SuppressWarnings("rawtypes")
public Boolean movableVertical (final Vector origin, final Vector dest) throws CGException {

    if (!this.pre_movableVertical(origin, dest).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in movableVertical");
    sentinel.entering(((BoardSentinel) sentinel).movableVertical);
    try {

      Boolean cond_3 = null;
      Integer var1_4 = null;
      if ((1 <= new Integer(2).intValue()) && (new Integer(2).intValue() <= origin.size())) 
        var1_4 = UTIL.NumberToInt(origin.get(new Integer(2).intValue() - 1));
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      Integer var2_7 = null;
      if ((1 <= new Integer(2).intValue()) && (new Integer(2).intValue() <= dest.size())) 
        var2_7 = UTIL.NumberToInt(dest.get(new Integer(2).intValue() - 1));
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      cond_3 = new Boolean(var1_4.intValue() == var2_7.intValue());
      if (cond_3.booleanValue()) {

        Boolean cond_11 = null;
        Boolean var1_12 = null;
        Integer var1_13 = null;
        if ((1 <= new Integer(2).intValue()) && (new Integer(2).intValue() <= origin.size())) 
          var1_13 = UTIL.NumberToInt(origin.get(new Integer(2).intValue() - 1));
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var1_12 = new Boolean(var1_13.intValue() == new Integer(1).intValue());
        {
          if (!(cond_11 = var1_12).booleanValue()) {

            Boolean var2_17 = null;
            Integer var1_18 = null;
            if ((1 <= new Integer(2).intValue()) && (new Integer(2).intValue() <= origin.size())) 
              var1_18 = UTIL.NumberToInt(origin.get(new Integer(2).intValue() - 1));
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            var2_17 = new Boolean(var1_18.intValue() == new Integer(7).intValue());
            cond_11 = var2_17;
          }
        }
        if (cond_11.booleanValue()) {

          Boolean rexpr_71 = null;
          Boolean var1_72 = null;
          Integer var1_73 = null;
          if ((1 <= new Integer(1).intValue()) && (new Integer(1).intValue() <= origin.size())) 
            var1_73 = UTIL.NumberToInt(origin.get(new Integer(1).intValue() - 1));
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          Integer var2_76 = null;
          Integer var1_77 = null;
          if ((1 <= new Integer(1).intValue()) && (new Integer(1).intValue() <= dest.size())) 
            var1_77 = UTIL.NumberToInt(dest.get(new Integer(1).intValue() - 1));
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          var2_76 = new Integer(var1_77.intValue() - new Integer(3).intValue());
          var1_72 = new Boolean(var1_73.intValue() == var2_76.intValue());
          {
            if (!(rexpr_71 = var1_72).booleanValue()) {

              Boolean var2_81 = null;
              Integer var1_82 = null;
              if ((1 <= new Integer(1).intValue()) && (new Integer(1).intValue() <= origin.size())) 
                var1_82 = UTIL.NumberToInt(origin.get(new Integer(1).intValue() - 1));
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              Integer var2_85 = null;
              Integer var1_86 = null;
              if ((1 <= new Integer(1).intValue()) && (new Integer(1).intValue() <= dest.size())) 
                var1_86 = UTIL.NumberToInt(dest.get(new Integer(1).intValue() - 1));
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              var2_85 = new Integer(var1_86.intValue() + new Integer(3).intValue());
              var2_81 = new Boolean(var1_82.intValue() == var2_85.intValue());
              rexpr_71 = var2_81;
            }
          }
          return rexpr_71;
        }
        else {

          Boolean cond_22 = null;
          Boolean var1_23 = null;
          Integer var1_24 = null;
          if ((1 <= new Integer(2).intValue()) && (new Integer(2).intValue() <= origin.size())) 
            var1_24 = UTIL.NumberToInt(origin.get(new Integer(2).intValue() - 1));
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          var1_23 = new Boolean(var1_24.intValue() == new Integer(2).intValue());
          {
            if (!(cond_22 = var1_23).booleanValue()) {

              Boolean var2_28 = null;
              Integer var1_29 = null;
              if ((1 <= new Integer(2).intValue()) && (new Integer(2).intValue() <= origin.size())) 
                var1_29 = UTIL.NumberToInt(origin.get(new Integer(2).intValue() - 1));
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              var2_28 = new Boolean(var1_29.intValue() == new Integer(6).intValue());
              cond_22 = var2_28;
            }
          }
          if (cond_22.booleanValue()) {

            Boolean rexpr_52 = null;
            Boolean var1_53 = null;
            Integer var1_54 = null;
            if ((1 <= new Integer(1).intValue()) && (new Integer(1).intValue() <= origin.size())) 
              var1_54 = UTIL.NumberToInt(origin.get(new Integer(1).intValue() - 1));
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            Integer var2_57 = null;
            Integer var1_58 = null;
            if ((1 <= new Integer(1).intValue()) && (new Integer(1).intValue() <= dest.size())) 
              var1_58 = UTIL.NumberToInt(dest.get(new Integer(1).intValue() - 1));
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            var2_57 = new Integer(var1_58.intValue() - new Integer(2).intValue());
            var1_53 = new Boolean(var1_54.intValue() == var2_57.intValue());
            {
              if (!(rexpr_52 = var1_53).booleanValue()) {

                Boolean var2_62 = null;
                Integer var1_63 = null;
                if ((1 <= new Integer(1).intValue()) && (new Integer(1).intValue() <= origin.size())) 
                  var1_63 = UTIL.NumberToInt(origin.get(new Integer(1).intValue() - 1));
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                Integer var2_66 = null;
                Integer var1_67 = null;
                if ((1 <= new Integer(1).intValue()) && (new Integer(1).intValue() <= dest.size())) 
                  var1_67 = UTIL.NumberToInt(dest.get(new Integer(1).intValue() - 1));
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                var2_66 = new Integer(var1_67.intValue() + new Integer(2).intValue());
                var2_62 = new Boolean(var1_63.intValue() == var2_66.intValue());
                rexpr_52 = var2_62;
              }
            }
            return rexpr_52;
          }
          else {

            Boolean rexpr_33 = null;
            Boolean var1_34 = null;
            Integer var1_35 = null;
            if ((1 <= new Integer(1).intValue()) && (new Integer(1).intValue() <= origin.size())) 
              var1_35 = UTIL.NumberToInt(origin.get(new Integer(1).intValue() - 1));
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            Integer var2_38 = null;
            Integer var1_39 = null;
            if ((1 <= new Integer(1).intValue()) && (new Integer(1).intValue() <= dest.size())) 
              var1_39 = UTIL.NumberToInt(dest.get(new Integer(1).intValue() - 1));
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            var2_38 = new Integer(var1_39.intValue() - new Integer(1).intValue());
            var1_34 = new Boolean(var1_35.intValue() == var2_38.intValue());
            {
              if (!(rexpr_33 = var1_34).booleanValue()) {

                Boolean var2_43 = null;
                Integer var1_44 = null;
                if ((1 <= new Integer(1).intValue()) && (new Integer(1).intValue() <= origin.size())) 
                  var1_44 = UTIL.NumberToInt(origin.get(new Integer(1).intValue() - 1));
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                Integer var2_47 = null;
                Integer var1_48 = null;
                if ((1 <= new Integer(1).intValue()) && (new Integer(1).intValue() <= dest.size())) 
                  var1_48 = UTIL.NumberToInt(dest.get(new Integer(1).intValue() - 1));
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                var2_47 = new Integer(var1_48.intValue() + new Integer(1).intValue());
                var2_43 = new Boolean(var1_44.intValue() == var2_47.intValue());
                rexpr_33 = var2_43;
              }
            }
            return rexpr_33;
          }
        }
      }
      else 
        return new Boolean(false);
    }
    finally {
      sentinel.leaving(((BoardSentinel) sentinel).movableVertical);
    }
  }
// ***** VDMTOOLS END Name=movableVertical#2|Vector|Vector


// ***** VDMTOOLS START Name=pre_movableVertical#2|Vector|Vector KEEP=NO
  @SuppressWarnings("rawtypes")
public Boolean pre_movableVertical (final Vector origin, final Vector dest) throws CGException {

    Boolean varRes_3 = null;
    {
      if ((varRes_3 = validCoords(origin)).booleanValue()) 
        varRes_3 = validCoords(dest);
    }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=pre_movableVertical#2|Vector|Vector


// ***** VDMTOOLS START Name=put#2|Object|Vector KEEP=NO
  @SuppressWarnings({ "rawtypes", "unchecked" })
public void put (final Object piece, final Vector coord) throws CGException {

    if (!this.pre_put(piece, coord).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in put");
    sentinel.entering(((BoardSentinel) sentinel).put);
    try {
      board.put(coord, piece);
    }
    finally {
      sentinel.leaving(((BoardSentinel) sentinel).put);
    }
  }
// ***** VDMTOOLS END Name=put#2|Object|Vector


// ***** VDMTOOLS START Name=pre_put#2|Object|Vector KEEP=NO
  @SuppressWarnings("rawtypes")
public Boolean pre_put (final Object piece, final Vector coord) throws CGException {

    Boolean varRes_3 = null;
    {
      if ((varRes_3 = new Boolean(UTIL.equals(board.get(coord), new quotes.UNDEFINED()))).booleanValue()) 
        varRes_3 = validCoords(coord);
    }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=pre_put#2|Object|Vector


// ***** VDMTOOLS START Name=hasMills#1|Object KEEP=NO
  @SuppressWarnings({ "rawtypes", "unchecked" })
public Boolean hasMills (final Object piece) throws CGException {

    if (!this.pre_hasMills(piece).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in hasMills");
    sentinel.entering(((BoardSentinel) sentinel).hasMills);
    try {

      HashSet coords = new HashSet();
      HashMap unArg_2 = new HashMap();
      HashSet var2_4 = new HashSet();
      var2_4 = new HashSet();
      var2_4.add(piece);
      unArg_2 = board;
      {

        HashMap tmpMap_6 = new HashMap();
        HashSet domM_7 = new HashSet();
        domM_7.addAll(unArg_2.keySet());
        Object elm_8;
        for (Iterator bb_9 = domM_7.iterator(); bb_9.hasNext(); ) {

          elm_8 = bb_9.next();
          if (var2_4.contains(unArg_2.get(elm_8))) 
            tmpMap_6.put(elm_8, unArg_2.get(elm_8));
        }
        unArg_2 = tmpMap_6;
      }
      coords.clear();
      coords.addAll(unArg_2.keySet());
      Boolean rexpr_10 = null;
      Boolean var1_11 = null;
      Boolean var1_12 = null;
      Boolean var1_13 = null;
      Boolean var1_14 = null;
      Boolean var1_15 = null;
      Boolean var1_16 = null;
      Boolean var1_17 = null;
      Boolean var1_18 = null;
      Boolean var1_19 = null;
      Boolean var1_20 = null;
      Boolean var1_21 = null;
      Boolean var1_22 = null;
      Boolean var1_23 = null;
      Boolean var1_24 = null;
      Boolean var1_25 = null;
      HashSet var1_26 = new HashSet();
      Vector enum_set_27 = null;
      enum_set_27 = new Vector();
      enum_set_27.add(new Integer(1));
      enum_set_27.add(new Integer(1));
      var1_26 = new HashSet();
      var1_26.add(enum_set_27);
      Vector enum_set_30 = null;
      enum_set_30 = new Vector();
      enum_set_30.add(new Integer(1));
      enum_set_30.add(new Integer(4));
      var1_26.add(enum_set_30);
      Vector enum_set_33 = null;
      enum_set_33 = new Vector();
      enum_set_33.add(new Integer(1));
      enum_set_33.add(new Integer(7));
      var1_26.add(enum_set_33);
      var1_25 = new Boolean(coords.containsAll(var1_26));
      {
        if (!(var1_24 = var1_25).booleanValue()) {

          Boolean var2_37 = null;
          HashSet var1_38 = new HashSet();
          Vector enum_set_39 = null;
          enum_set_39 = new Vector();
          enum_set_39.add(new Integer(2));
          enum_set_39.add(new Integer(2));
          var1_38 = new HashSet();
          var1_38.add(enum_set_39);
          Vector enum_set_42 = null;
          enum_set_42 = new Vector();
          enum_set_42.add(new Integer(2));
          enum_set_42.add(new Integer(4));
          var1_38.add(enum_set_42);
          Vector enum_set_45 = null;
          enum_set_45 = new Vector();
          enum_set_45.add(new Integer(2));
          enum_set_45.add(new Integer(6));
          var1_38.add(enum_set_45);
          var2_37 = new Boolean(coords.containsAll(var1_38));
          var1_24 = var2_37;
        }
      }
      {
        if (!(var1_23 = var1_24).booleanValue()) {

          Boolean var2_49 = null;
          HashSet var1_50 = new HashSet();
          Vector enum_set_51 = null;
          enum_set_51 = new Vector();
          enum_set_51.add(new Integer(3));
          enum_set_51.add(new Integer(3));
          var1_50 = new HashSet();
          var1_50.add(enum_set_51);
          Vector enum_set_54 = null;
          enum_set_54 = new Vector();
          enum_set_54.add(new Integer(3));
          enum_set_54.add(new Integer(4));
          var1_50.add(enum_set_54);
          Vector enum_set_57 = null;
          enum_set_57 = new Vector();
          enum_set_57.add(new Integer(3));
          enum_set_57.add(new Integer(5));
          var1_50.add(enum_set_57);
          var2_49 = new Boolean(coords.containsAll(var1_50));
          var1_23 = var2_49;
        }
      }
      {
        if (!(var1_22 = var1_23).booleanValue()) {

          Boolean var2_61 = null;
          HashSet var1_62 = new HashSet();
          Vector enum_set_63 = null;
          enum_set_63 = new Vector();
          enum_set_63.add(new Integer(5));
          enum_set_63.add(new Integer(3));
          var1_62 = new HashSet();
          var1_62.add(enum_set_63);
          Vector enum_set_66 = null;
          enum_set_66 = new Vector();
          enum_set_66.add(new Integer(5));
          enum_set_66.add(new Integer(4));
          var1_62.add(enum_set_66);
          Vector enum_set_69 = null;
          enum_set_69 = new Vector();
          enum_set_69.add(new Integer(5));
          enum_set_69.add(new Integer(5));
          var1_62.add(enum_set_69);
          var2_61 = new Boolean(coords.containsAll(var1_62));
          var1_22 = var2_61;
        }
      }
      {
        if (!(var1_21 = var1_22).booleanValue()) {

          Boolean var2_73 = null;
          HashSet var1_74 = new HashSet();
          Vector enum_set_75 = null;
          enum_set_75 = new Vector();
          enum_set_75.add(new Integer(6));
          enum_set_75.add(new Integer(2));
          var1_74 = new HashSet();
          var1_74.add(enum_set_75);
          Vector enum_set_78 = null;
          enum_set_78 = new Vector();
          enum_set_78.add(new Integer(6));
          enum_set_78.add(new Integer(4));
          var1_74.add(enum_set_78);
          Vector enum_set_81 = null;
          enum_set_81 = new Vector();
          enum_set_81.add(new Integer(6));
          enum_set_81.add(new Integer(6));
          var1_74.add(enum_set_81);
          var2_73 = new Boolean(coords.containsAll(var1_74));
          var1_21 = var2_73;
        }
      }
      {
        if (!(var1_20 = var1_21).booleanValue()) {

          Boolean var2_85 = null;
          HashSet var1_86 = new HashSet();
          Vector enum_set_87 = null;
          enum_set_87 = new Vector();
          enum_set_87.add(new Integer(7));
          enum_set_87.add(new Integer(1));
          var1_86 = new HashSet();
          var1_86.add(enum_set_87);
          Vector enum_set_90 = null;
          enum_set_90 = new Vector();
          enum_set_90.add(new Integer(7));
          enum_set_90.add(new Integer(4));
          var1_86.add(enum_set_90);
          Vector enum_set_93 = null;
          enum_set_93 = new Vector();
          enum_set_93.add(new Integer(7));
          enum_set_93.add(new Integer(7));
          var1_86.add(enum_set_93);
          var2_85 = new Boolean(coords.containsAll(var1_86));
          var1_20 = var2_85;
        }
      }
      {
        if (!(var1_19 = var1_20).booleanValue()) {

          Boolean var2_97 = null;
          HashSet var1_98 = new HashSet();
          Vector enum_set_99 = null;
          enum_set_99 = new Vector();
          enum_set_99.add(new Integer(1));
          enum_set_99.add(new Integer(1));
          var1_98 = new HashSet();
          var1_98.add(enum_set_99);
          Vector enum_set_102 = null;
          enum_set_102 = new Vector();
          enum_set_102.add(new Integer(4));
          enum_set_102.add(new Integer(1));
          var1_98.add(enum_set_102);
          Vector enum_set_105 = null;
          enum_set_105 = new Vector();
          enum_set_105.add(new Integer(7));
          enum_set_105.add(new Integer(1));
          var1_98.add(enum_set_105);
          var2_97 = new Boolean(coords.containsAll(var1_98));
          var1_19 = var2_97;
        }
      }
      {
        if (!(var1_18 = var1_19).booleanValue()) {

          Boolean var2_109 = null;
          HashSet var1_110 = new HashSet();
          Vector enum_set_111 = null;
          enum_set_111 = new Vector();
          enum_set_111.add(new Integer(2));
          enum_set_111.add(new Integer(2));
          var1_110 = new HashSet();
          var1_110.add(enum_set_111);
          Vector enum_set_114 = null;
          enum_set_114 = new Vector();
          enum_set_114.add(new Integer(4));
          enum_set_114.add(new Integer(2));
          var1_110.add(enum_set_114);
          Vector enum_set_117 = null;
          enum_set_117 = new Vector();
          enum_set_117.add(new Integer(6));
          enum_set_117.add(new Integer(2));
          var1_110.add(enum_set_117);
          var2_109 = new Boolean(coords.containsAll(var1_110));
          var1_18 = var2_109;
        }
      }
      {
        if (!(var1_17 = var1_18).booleanValue()) {

          Boolean var2_121 = null;
          HashSet var1_122 = new HashSet();
          Vector enum_set_123 = null;
          enum_set_123 = new Vector();
          enum_set_123.add(new Integer(3));
          enum_set_123.add(new Integer(3));
          var1_122 = new HashSet();
          var1_122.add(enum_set_123);
          Vector enum_set_126 = null;
          enum_set_126 = new Vector();
          enum_set_126.add(new Integer(4));
          enum_set_126.add(new Integer(3));
          var1_122.add(enum_set_126);
          Vector enum_set_129 = null;
          enum_set_129 = new Vector();
          enum_set_129.add(new Integer(5));
          enum_set_129.add(new Integer(3));
          var1_122.add(enum_set_129);
          var2_121 = new Boolean(coords.containsAll(var1_122));
          var1_17 = var2_121;
        }
      }
      {
        if (!(var1_16 = var1_17).booleanValue()) {

          Boolean var2_133 = null;
          HashSet var1_134 = new HashSet();
          Vector enum_set_135 = null;
          enum_set_135 = new Vector();
          enum_set_135.add(new Integer(3));
          enum_set_135.add(new Integer(5));
          var1_134 = new HashSet();
          var1_134.add(enum_set_135);
          Vector enum_set_138 = null;
          enum_set_138 = new Vector();
          enum_set_138.add(new Integer(4));
          enum_set_138.add(new Integer(5));
          var1_134.add(enum_set_138);
          Vector enum_set_141 = null;
          enum_set_141 = new Vector();
          enum_set_141.add(new Integer(5));
          enum_set_141.add(new Integer(5));
          var1_134.add(enum_set_141);
          var2_133 = new Boolean(coords.containsAll(var1_134));
          var1_16 = var2_133;
        }
      }
      {
        if (!(var1_15 = var1_16).booleanValue()) {

          Boolean var2_145 = null;
          HashSet var1_146 = new HashSet();
          Vector enum_set_147 = null;
          enum_set_147 = new Vector();
          enum_set_147.add(new Integer(2));
          enum_set_147.add(new Integer(6));
          var1_146 = new HashSet();
          var1_146.add(enum_set_147);
          Vector enum_set_150 = null;
          enum_set_150 = new Vector();
          enum_set_150.add(new Integer(4));
          enum_set_150.add(new Integer(6));
          var1_146.add(enum_set_150);
          Vector enum_set_153 = null;
          enum_set_153 = new Vector();
          enum_set_153.add(new Integer(6));
          enum_set_153.add(new Integer(6));
          var1_146.add(enum_set_153);
          var2_145 = new Boolean(coords.containsAll(var1_146));
          var1_15 = var2_145;
        }
      }
      {
        if (!(var1_14 = var1_15).booleanValue()) {

          Boolean var2_157 = null;
          HashSet var1_158 = new HashSet();
          Vector enum_set_159 = null;
          enum_set_159 = new Vector();
          enum_set_159.add(new Integer(1));
          enum_set_159.add(new Integer(7));
          var1_158 = new HashSet();
          var1_158.add(enum_set_159);
          Vector enum_set_162 = null;
          enum_set_162 = new Vector();
          enum_set_162.add(new Integer(4));
          enum_set_162.add(new Integer(7));
          var1_158.add(enum_set_162);
          Vector enum_set_165 = null;
          enum_set_165 = new Vector();
          enum_set_165.add(new Integer(7));
          enum_set_165.add(new Integer(7));
          var1_158.add(enum_set_165);
          var2_157 = new Boolean(coords.containsAll(var1_158));
          var1_14 = var2_157;
        }
      }
      {
        if (!(var1_13 = var1_14).booleanValue()) {

          Boolean var2_169 = null;
          HashSet var1_170 = new HashSet();
          Vector enum_set_171 = null;
          enum_set_171 = new Vector();
          enum_set_171.add(new Integer(4));
          enum_set_171.add(new Integer(1));
          var1_170 = new HashSet();
          var1_170.add(enum_set_171);
          Vector enum_set_174 = null;
          enum_set_174 = new Vector();
          enum_set_174.add(new Integer(4));
          enum_set_174.add(new Integer(2));
          var1_170.add(enum_set_174);
          Vector enum_set_177 = null;
          enum_set_177 = new Vector();
          enum_set_177.add(new Integer(4));
          enum_set_177.add(new Integer(3));
          var1_170.add(enum_set_177);
          var2_169 = new Boolean(coords.containsAll(var1_170));
          var1_13 = var2_169;
        }
      }
      {
        if (!(var1_12 = var1_13).booleanValue()) {

          Boolean var2_181 = null;
          HashSet var1_182 = new HashSet();
          Vector enum_set_183 = null;
          enum_set_183 = new Vector();
          enum_set_183.add(new Integer(4));
          enum_set_183.add(new Integer(5));
          var1_182 = new HashSet();
          var1_182.add(enum_set_183);
          Vector enum_set_186 = null;
          enum_set_186 = new Vector();
          enum_set_186.add(new Integer(4));
          enum_set_186.add(new Integer(6));
          var1_182.add(enum_set_186);
          Vector enum_set_189 = null;
          enum_set_189 = new Vector();
          enum_set_189.add(new Integer(4));
          enum_set_189.add(new Integer(7));
          var1_182.add(enum_set_189);
          var2_181 = new Boolean(coords.containsAll(var1_182));
          var1_12 = var2_181;
        }
      }
      {
        if (!(var1_11 = var1_12).booleanValue()) {

          Boolean var2_193 = null;
          HashSet var1_194 = new HashSet();
          Vector enum_set_195 = null;
          enum_set_195 = new Vector();
          enum_set_195.add(new Integer(1));
          enum_set_195.add(new Integer(4));
          var1_194 = new HashSet();
          var1_194.add(enum_set_195);
          Vector enum_set_198 = null;
          enum_set_198 = new Vector();
          enum_set_198.add(new Integer(2));
          enum_set_198.add(new Integer(4));
          var1_194.add(enum_set_198);
          Vector enum_set_201 = null;
          enum_set_201 = new Vector();
          enum_set_201.add(new Integer(3));
          enum_set_201.add(new Integer(4));
          var1_194.add(enum_set_201);
          var2_193 = new Boolean(coords.containsAll(var1_194));
          var1_11 = var2_193;
        }
      }
      {
        if (!(rexpr_10 = var1_11).booleanValue()) {

          Boolean var2_205 = null;
          HashSet var1_206 = new HashSet();
          Vector enum_set_207 = null;
          enum_set_207 = new Vector();
          enum_set_207.add(new Integer(5));
          enum_set_207.add(new Integer(4));
          var1_206 = new HashSet();
          var1_206.add(enum_set_207);
          Vector enum_set_210 = null;
          enum_set_210 = new Vector();
          enum_set_210.add(new Integer(6));
          enum_set_210.add(new Integer(4));
          var1_206.add(enum_set_210);
          Vector enum_set_213 = null;
          enum_set_213 = new Vector();
          enum_set_213.add(new Integer(7));
          enum_set_213.add(new Integer(4));
          var1_206.add(enum_set_213);
          var2_205 = new Boolean(coords.containsAll(var1_206));
          rexpr_10 = var2_205;
        }
      }
      return rexpr_10;
    }
    finally {
      sentinel.leaving(((BoardSentinel) sentinel).hasMills);
    }
  }
// ***** VDMTOOLS END Name=hasMills#1|Object


// ***** VDMTOOLS START Name=pre_hasMills#1|Object KEEP=NO
  public Boolean pre_hasMills (final Object piece) throws CGException {
    return new Boolean(!UTIL.equals(piece, new quotes.UNDEFINED()));
  }
// ***** VDMTOOLS END Name=pre_hasMills#1|Object


// ***** VDMTOOLS START Name=getMills#1|Object KEEP=NO
  @SuppressWarnings({ "rawtypes", "unchecked" })
public HashSet getMills (final Object piece) throws CGException {

    if (!this.pre_getMills(piece).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in getMills");
    sentinel.entering(((BoardSentinel) sentinel).getMills);
    try {

      HashSet coords = new HashSet();
      HashMap unArg_2 = new HashMap();
      HashSet var2_4 = new HashSet();
      var2_4 = new HashSet();
      var2_4.add(piece);
      unArg_2 = board;
      {

        HashMap tmpMap_6 = new HashMap();
        HashSet domM_7 = new HashSet();
        domM_7.addAll(unArg_2.keySet());
        Object elm_8;
        for (Iterator bb_9 = domM_7.iterator(); bb_9.hasNext(); ) {

          elm_8 = bb_9.next();
          if (var2_4.contains(unArg_2.get(elm_8))) 
            tmpMap_6.put(elm_8, unArg_2.get(elm_8));
        }
        unArg_2 = tmpMap_6;
      }
      coords.clear();
      coords.addAll(unArg_2.keySet());
      HashSet mills = new HashSet();
      Boolean cond_10 = null;
      HashSet var1_11 = new HashSet();
      Vector enum_set_12 = null;
      enum_set_12 = new Vector();
      enum_set_12.add(new Integer(1));
      enum_set_12.add(new Integer(1));
      var1_11 = new HashSet();
      var1_11.add(enum_set_12);
      Vector enum_set_15 = null;
      enum_set_15 = new Vector();
      enum_set_15.add(new Integer(1));
      enum_set_15.add(new Integer(4));
      var1_11.add(enum_set_15);
      Vector enum_set_18 = null;
      enum_set_18 = new Vector();
      enum_set_18.add(new Integer(1));
      enum_set_18.add(new Integer(7));
      var1_11.add(enum_set_18);
      cond_10 = new Boolean(coords.containsAll(var1_11));
      if (cond_10.booleanValue()) {

        HashSet elem_23 = new HashSet();
        Vector enum_set_24 = null;
        enum_set_24 = new Vector();
        enum_set_24.add(new Integer(1));
        enum_set_24.add(new Integer(1));
        elem_23 = new HashSet();
        elem_23.add(enum_set_24);
        Vector enum_set_27 = null;
        enum_set_27 = new Vector();
        enum_set_27.add(new Integer(1));
        enum_set_27.add(new Integer(4));
        elem_23.add(enum_set_27);
        Vector enum_set_30 = null;
        enum_set_30 = new Vector();
        enum_set_30.add(new Integer(1));
        enum_set_30.add(new Integer(7));
        elem_23.add(enum_set_30);
        mills.add(elem_23);
      }
      Boolean cond_33 = null;
      HashSet var1_34 = new HashSet();
      Vector enum_set_35 = null;
      enum_set_35 = new Vector();
      enum_set_35.add(new Integer(1));
      enum_set_35.add(new Integer(1));
      var1_34 = new HashSet();
      var1_34.add(enum_set_35);
      Vector enum_set_38 = null;
      enum_set_38 = new Vector();
      enum_set_38.add(new Integer(1));
      enum_set_38.add(new Integer(4));
      var1_34.add(enum_set_38);
      Vector enum_set_41 = null;
      enum_set_41 = new Vector();
      enum_set_41.add(new Integer(1));
      enum_set_41.add(new Integer(7));
      var1_34.add(enum_set_41);
      cond_33 = new Boolean(coords.containsAll(var1_34));
      if (cond_33.booleanValue()) {

        HashSet elem_46 = new HashSet();
        Vector enum_set_47 = null;
        enum_set_47 = new Vector();
        enum_set_47.add(new Integer(1));
        enum_set_47.add(new Integer(1));
        elem_46 = new HashSet();
        elem_46.add(enum_set_47);
        Vector enum_set_50 = null;
        enum_set_50 = new Vector();
        enum_set_50.add(new Integer(1));
        enum_set_50.add(new Integer(4));
        elem_46.add(enum_set_50);
        Vector enum_set_53 = null;
        enum_set_53 = new Vector();
        enum_set_53.add(new Integer(1));
        enum_set_53.add(new Integer(7));
        elem_46.add(enum_set_53);
        mills.add(elem_46);
      }
      Boolean cond_56 = null;
      HashSet var1_57 = new HashSet();
      Vector enum_set_58 = null;
      enum_set_58 = new Vector();
      enum_set_58.add(new Integer(2));
      enum_set_58.add(new Integer(2));
      var1_57 = new HashSet();
      var1_57.add(enum_set_58);
      Vector enum_set_61 = null;
      enum_set_61 = new Vector();
      enum_set_61.add(new Integer(2));
      enum_set_61.add(new Integer(4));
      var1_57.add(enum_set_61);
      Vector enum_set_64 = null;
      enum_set_64 = new Vector();
      enum_set_64.add(new Integer(2));
      enum_set_64.add(new Integer(6));
      var1_57.add(enum_set_64);
      cond_56 = new Boolean(coords.containsAll(var1_57));
      if (cond_56.booleanValue()) {

        HashSet elem_69 = new HashSet();
        Vector enum_set_70 = null;
        enum_set_70 = new Vector();
        enum_set_70.add(new Integer(2));
        enum_set_70.add(new Integer(2));
        elem_69 = new HashSet();
        elem_69.add(enum_set_70);
        Vector enum_set_73 = null;
        enum_set_73 = new Vector();
        enum_set_73.add(new Integer(2));
        enum_set_73.add(new Integer(4));
        elem_69.add(enum_set_73);
        Vector enum_set_76 = null;
        enum_set_76 = new Vector();
        enum_set_76.add(new Integer(2));
        enum_set_76.add(new Integer(6));
        elem_69.add(enum_set_76);
        mills.add(elem_69);
      }
      Boolean cond_79 = null;
      HashSet var1_80 = new HashSet();
      Vector enum_set_81 = null;
      enum_set_81 = new Vector();
      enum_set_81.add(new Integer(3));
      enum_set_81.add(new Integer(3));
      var1_80 = new HashSet();
      var1_80.add(enum_set_81);
      Vector enum_set_84 = null;
      enum_set_84 = new Vector();
      enum_set_84.add(new Integer(3));
      enum_set_84.add(new Integer(4));
      var1_80.add(enum_set_84);
      Vector enum_set_87 = null;
      enum_set_87 = new Vector();
      enum_set_87.add(new Integer(3));
      enum_set_87.add(new Integer(5));
      var1_80.add(enum_set_87);
      cond_79 = new Boolean(coords.containsAll(var1_80));
      if (cond_79.booleanValue()) {

        HashSet elem_92 = new HashSet();
        Vector enum_set_93 = null;
        enum_set_93 = new Vector();
        enum_set_93.add(new Integer(3));
        enum_set_93.add(new Integer(3));
        elem_92 = new HashSet();
        elem_92.add(enum_set_93);
        Vector enum_set_96 = null;
        enum_set_96 = new Vector();
        enum_set_96.add(new Integer(3));
        enum_set_96.add(new Integer(4));
        elem_92.add(enum_set_96);
        Vector enum_set_99 = null;
        enum_set_99 = new Vector();
        enum_set_99.add(new Integer(3));
        enum_set_99.add(new Integer(5));
        elem_92.add(enum_set_99);
        mills.add(elem_92);
      }
      Boolean cond_102 = null;
      HashSet var1_103 = new HashSet();
      Vector enum_set_104 = null;
      enum_set_104 = new Vector();
      enum_set_104.add(new Integer(5));
      enum_set_104.add(new Integer(3));
      var1_103 = new HashSet();
      var1_103.add(enum_set_104);
      Vector enum_set_107 = null;
      enum_set_107 = new Vector();
      enum_set_107.add(new Integer(5));
      enum_set_107.add(new Integer(4));
      var1_103.add(enum_set_107);
      Vector enum_set_110 = null;
      enum_set_110 = new Vector();
      enum_set_110.add(new Integer(5));
      enum_set_110.add(new Integer(5));
      var1_103.add(enum_set_110);
      cond_102 = new Boolean(coords.containsAll(var1_103));
      if (cond_102.booleanValue()) {

        HashSet elem_115 = new HashSet();
        Vector enum_set_116 = null;
        enum_set_116 = new Vector();
        enum_set_116.add(new Integer(5));
        enum_set_116.add(new Integer(3));
        elem_115 = new HashSet();
        elem_115.add(enum_set_116);
        Vector enum_set_119 = null;
        enum_set_119 = new Vector();
        enum_set_119.add(new Integer(5));
        enum_set_119.add(new Integer(4));
        elem_115.add(enum_set_119);
        Vector enum_set_122 = null;
        enum_set_122 = new Vector();
        enum_set_122.add(new Integer(5));
        enum_set_122.add(new Integer(5));
        elem_115.add(enum_set_122);
        mills.add(elem_115);
      }
      Boolean cond_125 = null;
      HashSet var1_126 = new HashSet();
      Vector enum_set_127 = null;
      enum_set_127 = new Vector();
      enum_set_127.add(new Integer(6));
      enum_set_127.add(new Integer(2));
      var1_126 = new HashSet();
      var1_126.add(enum_set_127);
      Vector enum_set_130 = null;
      enum_set_130 = new Vector();
      enum_set_130.add(new Integer(6));
      enum_set_130.add(new Integer(4));
      var1_126.add(enum_set_130);
      Vector enum_set_133 = null;
      enum_set_133 = new Vector();
      enum_set_133.add(new Integer(6));
      enum_set_133.add(new Integer(6));
      var1_126.add(enum_set_133);
      cond_125 = new Boolean(coords.containsAll(var1_126));
      if (cond_125.booleanValue()) {

        HashSet elem_138 = new HashSet();
        Vector enum_set_139 = null;
        enum_set_139 = new Vector();
        enum_set_139.add(new Integer(6));
        enum_set_139.add(new Integer(2));
        elem_138 = new HashSet();
        elem_138.add(enum_set_139);
        Vector enum_set_142 = null;
        enum_set_142 = new Vector();
        enum_set_142.add(new Integer(6));
        enum_set_142.add(new Integer(4));
        elem_138.add(enum_set_142);
        Vector enum_set_145 = null;
        enum_set_145 = new Vector();
        enum_set_145.add(new Integer(6));
        enum_set_145.add(new Integer(6));
        elem_138.add(enum_set_145);
        mills.add(elem_138);
      }
      Boolean cond_148 = null;
      HashSet var1_149 = new HashSet();
      Vector enum_set_150 = null;
      enum_set_150 = new Vector();
      enum_set_150.add(new Integer(7));
      enum_set_150.add(new Integer(1));
      var1_149 = new HashSet();
      var1_149.add(enum_set_150);
      Vector enum_set_153 = null;
      enum_set_153 = new Vector();
      enum_set_153.add(new Integer(7));
      enum_set_153.add(new Integer(4));
      var1_149.add(enum_set_153);
      Vector enum_set_156 = null;
      enum_set_156 = new Vector();
      enum_set_156.add(new Integer(7));
      enum_set_156.add(new Integer(7));
      var1_149.add(enum_set_156);
      cond_148 = new Boolean(coords.containsAll(var1_149));
      if (cond_148.booleanValue()) {

        HashSet elem_161 = new HashSet();
        Vector enum_set_162 = null;
        enum_set_162 = new Vector();
        enum_set_162.add(new Integer(7));
        enum_set_162.add(new Integer(1));
        elem_161 = new HashSet();
        elem_161.add(enum_set_162);
        Vector enum_set_165 = null;
        enum_set_165 = new Vector();
        enum_set_165.add(new Integer(7));
        enum_set_165.add(new Integer(4));
        elem_161.add(enum_set_165);
        Vector enum_set_168 = null;
        enum_set_168 = new Vector();
        enum_set_168.add(new Integer(7));
        enum_set_168.add(new Integer(7));
        elem_161.add(enum_set_168);
        mills.add(elem_161);
      }
      Boolean cond_171 = null;
      HashSet var1_172 = new HashSet();
      Vector enum_set_173 = null;
      enum_set_173 = new Vector();
      enum_set_173.add(new Integer(1));
      enum_set_173.add(new Integer(1));
      var1_172 = new HashSet();
      var1_172.add(enum_set_173);
      Vector enum_set_176 = null;
      enum_set_176 = new Vector();
      enum_set_176.add(new Integer(4));
      enum_set_176.add(new Integer(1));
      var1_172.add(enum_set_176);
      Vector enum_set_179 = null;
      enum_set_179 = new Vector();
      enum_set_179.add(new Integer(7));
      enum_set_179.add(new Integer(1));
      var1_172.add(enum_set_179);
      cond_171 = new Boolean(coords.containsAll(var1_172));
      if (cond_171.booleanValue()) {

        HashSet elem_184 = new HashSet();
        Vector enum_set_185 = null;
        enum_set_185 = new Vector();
        enum_set_185.add(new Integer(1));
        enum_set_185.add(new Integer(1));
        elem_184 = new HashSet();
        elem_184.add(enum_set_185);
        Vector enum_set_188 = null;
        enum_set_188 = new Vector();
        enum_set_188.add(new Integer(4));
        enum_set_188.add(new Integer(1));
        elem_184.add(enum_set_188);
        Vector enum_set_191 = null;
        enum_set_191 = new Vector();
        enum_set_191.add(new Integer(7));
        enum_set_191.add(new Integer(1));
        elem_184.add(enum_set_191);
        mills.add(elem_184);
      }
      Boolean cond_194 = null;
      HashSet var1_195 = new HashSet();
      Vector enum_set_196 = null;
      enum_set_196 = new Vector();
      enum_set_196.add(new Integer(2));
      enum_set_196.add(new Integer(2));
      var1_195 = new HashSet();
      var1_195.add(enum_set_196);
      Vector enum_set_199 = null;
      enum_set_199 = new Vector();
      enum_set_199.add(new Integer(4));
      enum_set_199.add(new Integer(2));
      var1_195.add(enum_set_199);
      Vector enum_set_202 = null;
      enum_set_202 = new Vector();
      enum_set_202.add(new Integer(6));
      enum_set_202.add(new Integer(2));
      var1_195.add(enum_set_202);
      cond_194 = new Boolean(coords.containsAll(var1_195));
      if (cond_194.booleanValue()) {

        HashSet elem_207 = new HashSet();
        Vector enum_set_208 = null;
        enum_set_208 = new Vector();
        enum_set_208.add(new Integer(2));
        enum_set_208.add(new Integer(2));
        elem_207 = new HashSet();
        elem_207.add(enum_set_208);
        Vector enum_set_211 = null;
        enum_set_211 = new Vector();
        enum_set_211.add(new Integer(4));
        enum_set_211.add(new Integer(2));
        elem_207.add(enum_set_211);
        Vector enum_set_214 = null;
        enum_set_214 = new Vector();
        enum_set_214.add(new Integer(6));
        enum_set_214.add(new Integer(2));
        elem_207.add(enum_set_214);
        mills.add(elem_207);
      }
      Boolean cond_217 = null;
      HashSet var1_218 = new HashSet();
      Vector enum_set_219 = null;
      enum_set_219 = new Vector();
      enum_set_219.add(new Integer(3));
      enum_set_219.add(new Integer(3));
      var1_218 = new HashSet();
      var1_218.add(enum_set_219);
      Vector enum_set_222 = null;
      enum_set_222 = new Vector();
      enum_set_222.add(new Integer(4));
      enum_set_222.add(new Integer(3));
      var1_218.add(enum_set_222);
      Vector enum_set_225 = null;
      enum_set_225 = new Vector();
      enum_set_225.add(new Integer(5));
      enum_set_225.add(new Integer(3));
      var1_218.add(enum_set_225);
      cond_217 = new Boolean(coords.containsAll(var1_218));
      if (cond_217.booleanValue()) {

        HashSet elem_230 = new HashSet();
        Vector enum_set_231 = null;
        enum_set_231 = new Vector();
        enum_set_231.add(new Integer(3));
        enum_set_231.add(new Integer(3));
        elem_230 = new HashSet();
        elem_230.add(enum_set_231);
        Vector enum_set_234 = null;
        enum_set_234 = new Vector();
        enum_set_234.add(new Integer(4));
        enum_set_234.add(new Integer(3));
        elem_230.add(enum_set_234);
        Vector enum_set_237 = null;
        enum_set_237 = new Vector();
        enum_set_237.add(new Integer(5));
        enum_set_237.add(new Integer(3));
        elem_230.add(enum_set_237);
        mills.add(elem_230);
      }
      Boolean cond_240 = null;
      HashSet var1_241 = new HashSet();
      Vector enum_set_242 = null;
      enum_set_242 = new Vector();
      enum_set_242.add(new Integer(3));
      enum_set_242.add(new Integer(5));
      var1_241 = new HashSet();
      var1_241.add(enum_set_242);
      Vector enum_set_245 = null;
      enum_set_245 = new Vector();
      enum_set_245.add(new Integer(4));
      enum_set_245.add(new Integer(5));
      var1_241.add(enum_set_245);
      Vector enum_set_248 = null;
      enum_set_248 = new Vector();
      enum_set_248.add(new Integer(5));
      enum_set_248.add(new Integer(5));
      var1_241.add(enum_set_248);
      cond_240 = new Boolean(coords.containsAll(var1_241));
      if (cond_240.booleanValue()) {

        HashSet elem_253 = new HashSet();
        Vector enum_set_254 = null;
        enum_set_254 = new Vector();
        enum_set_254.add(new Integer(3));
        enum_set_254.add(new Integer(5));
        elem_253 = new HashSet();
        elem_253.add(enum_set_254);
        Vector enum_set_257 = null;
        enum_set_257 = new Vector();
        enum_set_257.add(new Integer(4));
        enum_set_257.add(new Integer(5));
        elem_253.add(enum_set_257);
        Vector enum_set_260 = null;
        enum_set_260 = new Vector();
        enum_set_260.add(new Integer(5));
        enum_set_260.add(new Integer(5));
        elem_253.add(enum_set_260);
        mills.add(elem_253);
      }
      Boolean cond_263 = null;
      HashSet var1_264 = new HashSet();
      Vector enum_set_265 = null;
      enum_set_265 = new Vector();
      enum_set_265.add(new Integer(2));
      enum_set_265.add(new Integer(6));
      var1_264 = new HashSet();
      var1_264.add(enum_set_265);
      Vector enum_set_268 = null;
      enum_set_268 = new Vector();
      enum_set_268.add(new Integer(4));
      enum_set_268.add(new Integer(6));
      var1_264.add(enum_set_268);
      Vector enum_set_271 = null;
      enum_set_271 = new Vector();
      enum_set_271.add(new Integer(6));
      enum_set_271.add(new Integer(6));
      var1_264.add(enum_set_271);
      cond_263 = new Boolean(coords.containsAll(var1_264));
      if (cond_263.booleanValue()) {

        HashSet elem_276 = new HashSet();
        Vector enum_set_277 = null;
        enum_set_277 = new Vector();
        enum_set_277.add(new Integer(2));
        enum_set_277.add(new Integer(6));
        elem_276 = new HashSet();
        elem_276.add(enum_set_277);
        Vector enum_set_280 = null;
        enum_set_280 = new Vector();
        enum_set_280.add(new Integer(4));
        enum_set_280.add(new Integer(6));
        elem_276.add(enum_set_280);
        Vector enum_set_283 = null;
        enum_set_283 = new Vector();
        enum_set_283.add(new Integer(6));
        enum_set_283.add(new Integer(6));
        elem_276.add(enum_set_283);
        mills.add(elem_276);
      }
      Boolean cond_286 = null;
      HashSet var1_287 = new HashSet();
      Vector enum_set_288 = null;
      enum_set_288 = new Vector();
      enum_set_288.add(new Integer(1));
      enum_set_288.add(new Integer(7));
      var1_287 = new HashSet();
      var1_287.add(enum_set_288);
      Vector enum_set_291 = null;
      enum_set_291 = new Vector();
      enum_set_291.add(new Integer(4));
      enum_set_291.add(new Integer(7));
      var1_287.add(enum_set_291);
      Vector enum_set_294 = null;
      enum_set_294 = new Vector();
      enum_set_294.add(new Integer(7));
      enum_set_294.add(new Integer(7));
      var1_287.add(enum_set_294);
      cond_286 = new Boolean(coords.containsAll(var1_287));
      if (cond_286.booleanValue()) {

        HashSet elem_299 = new HashSet();
        Vector enum_set_300 = null;
        enum_set_300 = new Vector();
        enum_set_300.add(new Integer(1));
        enum_set_300.add(new Integer(7));
        elem_299 = new HashSet();
        elem_299.add(enum_set_300);
        Vector enum_set_303 = null;
        enum_set_303 = new Vector();
        enum_set_303.add(new Integer(4));
        enum_set_303.add(new Integer(7));
        elem_299.add(enum_set_303);
        Vector enum_set_306 = null;
        enum_set_306 = new Vector();
        enum_set_306.add(new Integer(7));
        enum_set_306.add(new Integer(7));
        elem_299.add(enum_set_306);
        mills.add(elem_299);
      }
      Boolean cond_309 = null;
      HashSet var1_310 = new HashSet();
      Vector enum_set_311 = null;
      enum_set_311 = new Vector();
      enum_set_311.add(new Integer(4));
      enum_set_311.add(new Integer(1));
      var1_310 = new HashSet();
      var1_310.add(enum_set_311);
      Vector enum_set_314 = null;
      enum_set_314 = new Vector();
      enum_set_314.add(new Integer(4));
      enum_set_314.add(new Integer(2));
      var1_310.add(enum_set_314);
      Vector enum_set_317 = null;
      enum_set_317 = new Vector();
      enum_set_317.add(new Integer(4));
      enum_set_317.add(new Integer(3));
      var1_310.add(enum_set_317);
      cond_309 = new Boolean(coords.containsAll(var1_310));
      if (cond_309.booleanValue()) {

        HashSet elem_322 = new HashSet();
        Vector enum_set_323 = null;
        enum_set_323 = new Vector();
        enum_set_323.add(new Integer(4));
        enum_set_323.add(new Integer(1));
        elem_322 = new HashSet();
        elem_322.add(enum_set_323);
        Vector enum_set_326 = null;
        enum_set_326 = new Vector();
        enum_set_326.add(new Integer(4));
        enum_set_326.add(new Integer(2));
        elem_322.add(enum_set_326);
        Vector enum_set_329 = null;
        enum_set_329 = new Vector();
        enum_set_329.add(new Integer(4));
        enum_set_329.add(new Integer(3));
        elem_322.add(enum_set_329);
        mills.add(elem_322);
      }
      Boolean cond_332 = null;
      HashSet var1_333 = new HashSet();
      Vector enum_set_334 = null;
      enum_set_334 = new Vector();
      enum_set_334.add(new Integer(4));
      enum_set_334.add(new Integer(5));
      var1_333 = new HashSet();
      var1_333.add(enum_set_334);
      Vector enum_set_337 = null;
      enum_set_337 = new Vector();
      enum_set_337.add(new Integer(4));
      enum_set_337.add(new Integer(6));
      var1_333.add(enum_set_337);
      Vector enum_set_340 = null;
      enum_set_340 = new Vector();
      enum_set_340.add(new Integer(4));
      enum_set_340.add(new Integer(7));
      var1_333.add(enum_set_340);
      cond_332 = new Boolean(coords.containsAll(var1_333));
      if (cond_332.booleanValue()) {

        HashSet elem_345 = new HashSet();
        Vector enum_set_346 = null;
        enum_set_346 = new Vector();
        enum_set_346.add(new Integer(4));
        enum_set_346.add(new Integer(5));
        elem_345 = new HashSet();
        elem_345.add(enum_set_346);
        Vector enum_set_349 = null;
        enum_set_349 = new Vector();
        enum_set_349.add(new Integer(4));
        enum_set_349.add(new Integer(6));
        elem_345.add(enum_set_349);
        Vector enum_set_352 = null;
        enum_set_352 = new Vector();
        enum_set_352.add(new Integer(4));
        enum_set_352.add(new Integer(7));
        elem_345.add(enum_set_352);
        mills.add(elem_345);
      }
      Boolean cond_355 = null;
      HashSet var1_356 = new HashSet();
      Vector enum_set_357 = null;
      enum_set_357 = new Vector();
      enum_set_357.add(new Integer(1));
      enum_set_357.add(new Integer(4));
      var1_356 = new HashSet();
      var1_356.add(enum_set_357);
      Vector enum_set_360 = null;
      enum_set_360 = new Vector();
      enum_set_360.add(new Integer(2));
      enum_set_360.add(new Integer(4));
      var1_356.add(enum_set_360);
      Vector enum_set_363 = null;
      enum_set_363 = new Vector();
      enum_set_363.add(new Integer(3));
      enum_set_363.add(new Integer(4));
      var1_356.add(enum_set_363);
      cond_355 = new Boolean(coords.containsAll(var1_356));
      if (cond_355.booleanValue()) {

        HashSet elem_368 = new HashSet();
        Vector enum_set_369 = null;
        enum_set_369 = new Vector();
        enum_set_369.add(new Integer(1));
        enum_set_369.add(new Integer(4));
        elem_368 = new HashSet();
        elem_368.add(enum_set_369);
        Vector enum_set_372 = null;
        enum_set_372 = new Vector();
        enum_set_372.add(new Integer(2));
        enum_set_372.add(new Integer(4));
        elem_368.add(enum_set_372);
        Vector enum_set_375 = null;
        enum_set_375 = new Vector();
        enum_set_375.add(new Integer(3));
        enum_set_375.add(new Integer(4));
        elem_368.add(enum_set_375);
        mills.add(elem_368);
      }
      Boolean cond_378 = null;
      HashSet var1_379 = new HashSet();
      Vector enum_set_380 = null;
      enum_set_380 = new Vector();
      enum_set_380.add(new Integer(5));
      enum_set_380.add(new Integer(4));
      var1_379 = new HashSet();
      var1_379.add(enum_set_380);
      Vector enum_set_383 = null;
      enum_set_383 = new Vector();
      enum_set_383.add(new Integer(6));
      enum_set_383.add(new Integer(4));
      var1_379.add(enum_set_383);
      Vector enum_set_386 = null;
      enum_set_386 = new Vector();
      enum_set_386.add(new Integer(7));
      enum_set_386.add(new Integer(4));
      var1_379.add(enum_set_386);
      cond_378 = new Boolean(coords.containsAll(var1_379));
      if (cond_378.booleanValue()) {

        HashSet elem_391 = new HashSet();
        Vector enum_set_392 = null;
        enum_set_392 = new Vector();
        enum_set_392.add(new Integer(5));
        enum_set_392.add(new Integer(4));
        elem_391 = new HashSet();
        elem_391.add(enum_set_392);
        Vector enum_set_395 = null;
        enum_set_395 = new Vector();
        enum_set_395.add(new Integer(6));
        enum_set_395.add(new Integer(4));
        elem_391.add(enum_set_395);
        Vector enum_set_398 = null;
        enum_set_398 = new Vector();
        enum_set_398.add(new Integer(7));
        enum_set_398.add(new Integer(4));
        elem_391.add(enum_set_398);
        mills.add(elem_391);
      }
      return mills;
    }
    finally {
      sentinel.leaving(((BoardSentinel) sentinel).getMills);
    }
  }
// ***** VDMTOOLS END Name=getMills#1|Object


// ***** VDMTOOLS START Name=pre_getMills#1|Object KEEP=NO
  public Boolean pre_getMills (final Object piece) throws CGException {
    return new Boolean(!UTIL.equals(piece, new quotes.UNDEFINED()));
  }
// ***** VDMTOOLS END Name=pre_getMills#1|Object


// ***** VDMTOOLS START Name=removable#2|Object|Vector KEEP=NO
  @SuppressWarnings("rawtypes")
public Boolean removable (final Object currentPlayer, final Vector coord) throws CGException {

    if (!this.pre_removable(currentPlayer, coord).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in removable");
    sentinel.entering(((BoardSentinel) sentinel).removable);
    try {

      Object piece = board.get(coord);
      Boolean cond_5 = null;
      {
        if ((cond_5 = new Boolean(!UTIL.equals(piece, new quotes.UNDEFINED()))).booleanValue()) 
          cond_5 = new Boolean(!UTIL.equals(piece, currentPlayer));
      }
      if (cond_5.booleanValue()) 
        return removableCheck(currentPlayer, coord);
      else 
        return new Boolean(false);
    }
    finally {
      sentinel.leaving(((BoardSentinel) sentinel).removable);
    }
  }
// ***** VDMTOOLS END Name=removable#2|Object|Vector


// ***** VDMTOOLS START Name=pre_removable#2|Object|Vector KEEP=NO
  public Boolean pre_removable (final Object currentPlayer, @SuppressWarnings("rawtypes") final Vector coord) throws CGException {

    Boolean varRes_3 = null;
    {
      if ((varRes_3 = new Boolean(!UTIL.equals(currentPlayer, new quotes.UNDEFINED()))).booleanValue()) 
        varRes_3 = validCoords(coord);
    }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=pre_removable#2|Object|Vector


// ***** VDMTOOLS START Name=removableCheck#2|Object|Vector KEEP=NO
  @SuppressWarnings({ "rawtypes", "unchecked" })
public Boolean removableCheck (final Object currentPlayer, final Vector coord) throws CGException {

    if (!this.pre_removableCheck(currentPlayer, coord).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in removableCheck");
    sentinel.entering(((BoardSentinel) sentinel).removableCheck);
    try {

      Object player = null;
      HashSet allCoords = new HashSet();
      HashSet millCoords = new HashSet();
      if (new Boolean(UTIL.equals(currentPlayer, new quotes.WHITE())).booleanValue()) 
        player = UTIL.clone(new quotes.BLACK());
      else 
        player = UTIL.clone(new quotes.WHITE());
      HashSet rhs_8 = new HashSet();
      HashMap unArg_9 = new HashMap();
      HashSet var2_11 = new HashSet();
      var2_11 = new HashSet();
      var2_11.add(player);
      unArg_9 = board;
      {

        HashMap tmpMap_13 = new HashMap();
        HashSet domM_14 = new HashSet();
        domM_14.addAll(unArg_9.keySet());
        Object elm_15;
        for (Iterator bb_16 = domM_14.iterator(); bb_16.hasNext(); ) {

          elm_15 = bb_16.next();
          if (var2_11.contains(unArg_9.get(elm_15))) 
            tmpMap_13.put(elm_15, unArg_9.get(elm_15));
        }
        unArg_9 = tmpMap_13;
      }
      rhs_8.clear();
      rhs_8.addAll(unArg_9.keySet());
      allCoords = (HashSet) UTIL.clone(rhs_8);
      HashSet rhs_17 = new HashSet();
      HashSet rduset_20 = new HashSet();
      HashSet argS_22 = new HashSet();
      argS_22.addAll(getMills(player));
      for (Iterator enm_23 = argS_22.iterator(); enm_23.hasNext(); ) {

        HashSet e_21 = (HashSet) enm_23.next();
        rduset_20.addAll(e_21);
      }
      rhs_17 = rduset_20;
      millCoords = (HashSet) UTIL.clone(rhs_17);
      Boolean rexpr_24 = null;
      Boolean var1_25 = null;
      var1_25 = new Boolean(!millCoords.contains(coord));
      {
        if (!(rexpr_24 = var1_25).booleanValue()) 
          rexpr_24 = new Boolean(UTIL.equals(allCoords, millCoords));
      }
      return rexpr_24;
    }
    finally {
      sentinel.leaving(((BoardSentinel) sentinel).removableCheck);
    }
  }
// ***** VDMTOOLS END Name=removableCheck#2|Object|Vector


// ***** VDMTOOLS START Name=pre_removableCheck#2|Object|Vector KEEP=NO
  @SuppressWarnings("rawtypes")
public Boolean pre_removableCheck (final Object currentPlayer, final Vector coord) throws CGException {

    Boolean varRes_3 = null;
    {
      if ((varRes_3 = new Boolean(!UTIL.equals(currentPlayer, new quotes.UNDEFINED()))).booleanValue()) 
        varRes_3 = validCoords(coord);
    }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=pre_removableCheck#2|Object|Vector

}
;
